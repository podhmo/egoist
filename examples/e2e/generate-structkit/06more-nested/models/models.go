package models

import (
	"github.com/podhmo/maperr"
	"encoding/json"
)

// this file is generated by egoist.generators.structkit

type Person struct {
	Name string `json:"name"`
	Age int `json:"age"`
	Followings [][]Person `json:"followings"`
	Followings2 [][]*Person `json:"followings2"`
	Groups map[string]map[string]Person `json:"groups"`
	Groups2 map[string]map[string]*Person `json:"groups2"`
}

func (p *Person) UnmarshalJSON(b []byte) error {
	var err *maperr.Error

	// loading internal data
	var inner struct {
		Name *string `json:"name"`// required
		Age *int `json:"age"`// required
		Followings *[][]Person `json:"followings"`// required
		Followings2 *[][]*Person `json:"followings2"`// required
		Groups *map[string]map[string]Person `json:"groups"`// required
		Groups2 *map[string]map[string]*Person `json:"groups2"`// required
	}
	if rawErr := json.Unmarshal(b, &inner); rawErr != nil  {
		return err.AddSummary(rawErr.Error())
	}

	// binding field value and required check
	{
		if inner.Name != nil  {
			p.Name = *inner.Name
		} else  {
			err = err.Add("name", maperr.Message{Text: "required"})
		}
		if inner.Age != nil  {
			p.Age = *inner.Age
		} else  {
			err = err.Add("age", maperr.Message{Text: "required"})
		}
		if inner.Followings != nil  {
			p.Followings = *inner.Followings
		} else  {
			err = err.Add("followings", maperr.Message{Text: "required"})
		}
		if inner.Followings2 != nil  {
			p.Followings2 = *inner.Followings2
		} else  {
			err = err.Add("followings2", maperr.Message{Text: "required"})
		}
		if inner.Groups != nil  {
			p.Groups = *inner.Groups
		} else  {
			err = err.Add("groups", maperr.Message{Text: "required"})
		}
		if inner.Groups2 != nil  {
			p.Groups2 = *inner.Groups2
		} else  {
			err = err.Add("groups2", maperr.Message{Text: "required"})
		}
	}

	return err.Untyped()
}