package models

import (
	"github.com/podhmo/maperr"
	"encoding/json"
)

// this file is generated by egoist.generators.structkit

type Person struct {
	Name string `json:"name"`
	Age int `json:"age"`
	Items map[string]Item `json:"items"`
	Items2 map[string]*Item `json:"items2"`
}

func (p *Person) UnmarshalJSON(b []byte) error {
	var err *maperr.Error

	// loading internal data
	var inner struct {
		Name *string `json:"name"`// required
		Age *int `json:"age"`// required
		Items *json.RawMessage `json:"items"`// required
		Items2 *json.RawMessage `json:"items2"`// required
	}
	if rawErr := json.Unmarshal(b, &inner); rawErr != nil  {
		return err.AddSummary(rawErr.Error())
	}

	// binding field value and required check
	{
		if inner.Name != nil  {
			p.Name = *inner.Name
		} else  {
			err = err.Add("name", maperr.Message{Text: "required"})
		}
		if inner.Age != nil  {
			p.Age = *inner.Age
		} else  {
			err = err.Add("age", maperr.Message{Text: "required"})
		}
		if inner.Items != nil  {
			p.Items = map[string]Item{}
			if rawerr := json.Unmarshal(*inner.Items, &p.Items); rawerr != nil  {
				err = err.Add("items", maperr.Message{Error: rawerr})
			}
		} else  {
			err = err.Add("items", maperr.Message{Text: "required"})
		}
		if inner.Items2 != nil  {
			p.Items2 = map[string]*Item{}
			if rawerr := json.Unmarshal(*inner.Items2, &p.Items2); rawerr != nil  {
				err = err.Add("items2", maperr.Message{Error: rawerr})
			}
		} else  {
			err = err.Add("items2", maperr.Message{Text: "required"})
		}
	}

	return err.Untyped()
}

type Item struct {
	Name string `json:"name"`
	Description string `json:"description"`
	Effect string `json:"effect"`
}

func (i *Item) UnmarshalJSON(b []byte) error {
	var err *maperr.Error

	// loading internal data
	var inner struct {
		Name *string `json:"name"`// required
		Description *string `json:"description"`// required
		Effect *string `json:"effect"`// required
	}
	if rawErr := json.Unmarshal(b, &inner); rawErr != nil  {
		return err.AddSummary(rawErr.Error())
	}

	// binding field value and required check
	{
		if inner.Name != nil  {
			i.Name = *inner.Name
		} else  {
			err = err.Add("name", maperr.Message{Text: "required"})
		}
		if inner.Description != nil  {
			i.Description = *inner.Description
		} else  {
			err = err.Add("description", maperr.Message{Text: "required"})
		}
		if inner.Effect != nil  {
			i.Effect = *inner.Effect
		} else  {
			err = err.Add("effect", maperr.Message{Text: "required"})
		}
	}

	return err.Untyped()
}