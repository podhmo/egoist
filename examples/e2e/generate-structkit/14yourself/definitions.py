import typing as t
from egoist.app import App, SettingsDict, parse_args

settings: SettingsDict = {"rootdir": "", "here": __file__}
app = App(settings)

app.include("egoist.directives.define_struct_set")


class Person:
    name: str
    age: int


@app.define_struct_set("egoist.generators.structkit:walk")
def models__models() -> None:
    import contextlib
    from egoist.internal.prestringutil import Module
    from egoist.generators.structkit import runtime
    from egoist.go.resolver import get_resolver

    @contextlib.contextmanager
    def emit(
        env: runtime.Env, classes: t.List[t.Type[t.Any]], dry_run: bool
    ) -> t.Iterator[Module]:
        if dry_run:
            yield env.m
            return

        from egoist.go.types import get_gopackage
        from egoist.go import walker
        from egoist.generators.structkit import _emit

        m = env.m
        resolver = get_resolver(m)
        ctx = walker.Context(m=m, resolver=resolver)

        yield m
        m.import_("")
        m.stmt(f"// this file is generated by *me*")
        m.sep()

        for item in walker.walk(ctx, classes):
            gopackage = get_gopackage(item.type_)
            if gopackage is not None:
                continue

            # emit only struct
            _emit.emit_struct(ctx, item)
            m.sep()
        return m

    with runtime.generate(emit, classes=[Person]) as m:
        m.package("models")


if __name__ == "__main__":
    for argv in parse_args(sep="-"):
        app.run(argv)
