import typing as t
import contextlib
from egoist.internal.prestringutil import Module
from egoist.generators.structkit import runtime
from egoist.go.resolver import get_resolver


@contextlib.contextmanager
def emit(
    env: runtime.Env, classes: t.List[t.Type[t.Any]], dry_run: bool
) -> t.Iterator[Module]:
    if dry_run:
        yield env.m
        return

    from egoist.go.types import get_gopackage
    from egoist.go import walker
    from egoist.generators.structkit import _emit

    m = env.m
    resolver = get_resolver(m)
    ctx = walker.Context(m=m, resolver=resolver)

    yield m
    m.import_("")
    m.stmt(f"// this file is generated by *me*")
    m.sep()

    for item in walker.walk(ctx, classes):
        gopackage = get_gopackage(item.type_)
        if gopackage is not None:
            continue

        # emit only struct
        _emit.emit_struct(ctx, item)
        m.sep()
    return m
