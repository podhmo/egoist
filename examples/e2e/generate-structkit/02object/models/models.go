package models

import (
	"github.com/podhmo/maperr"
	"encoding/json"
)

// this file is generated by egoist.generators.structkit

type Person struct {
	Name string `json:"name"`
	Age int `json:"age"`
	Memo Memo `json:"memo"`
	Memo2 *Memo `json:"memo2"`
}

func (p *Person) UnmarshalJSON(b []byte) error {
	var err *maperr.Error

	// loading internal data
	var inner struct {
		Name *string `json:"name"`// required
		Age *int `json:"age"`// required
		Memo *json.RawMessage `json:"memo"`// required
		Memo2 *json.RawMessage `json:"memo2"`
	}
	if rawErr := json.Unmarshal(b, &inner); rawErr != nil  {
		return err.AddSummary(rawErr.Error())
	}

	// binding field value and required check
	{
		if inner.Name != nil  {
			p.Name = *inner.Name
		} else  {
			err = err.Add("name", maperr.Message{Text: "required"})
		}
		if inner.Age != nil  {
			p.Age = *inner.Age
		} else  {
			err = err.Add("age", maperr.Message{Text: "required"})
		}
		if inner.Memo != nil  {
			if rawerr := json.Unmarshal(*inner.Memo, &p.Memo); rawerr != nil  {
				err = err.Add("memo", maperr.Message{Error: rawerr})
			}
		} else  {
			err = err.Add("memo", maperr.Message{Text: "required"})
		}
		if inner.Memo2 != nil  {
			p.Memo2 = &Memo{}
			if rawerr := json.Unmarshal(*inner.Memo2, p.Memo2); rawerr != nil  {
				err = err.Add("memo2", maperr.Message{Error: rawerr})
			}
		}
	}

	return err.Untyped()
}

type Memo struct {
	Content string `json:"content"`
}

func (m *Memo) UnmarshalJSON(b []byte) error {
	var err *maperr.Error

	// loading internal data
	var inner struct {
		Content *string `json:"content"`// required
	}
	if rawErr := json.Unmarshal(b, &inner); rawErr != nil  {
		return err.AddSummary(rawErr.Error())
	}

	// binding field value and required check
	{
		if inner.Content != nil  {
			m.Content = *inner.Content
		} else  {
			err = err.Add("content", maperr.Message{Text: "required"})
		}
	}

	return err.Untyped()
}