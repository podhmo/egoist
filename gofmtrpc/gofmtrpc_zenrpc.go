// Code generated by zenrpc; DO NOT EDIT.

package gofmtrpc

import (
	"context"
	"encoding/json"

	"github.com/semrush/zenrpc"
	"github.com/semrush/zenrpc/smd"
)

var RPC = struct {
	GofmtService struct{ Format, FormatFile string }
}{
	GofmtService: struct{ Format, FormatFile string }{
		Format:     "format",
		FormatFile: "formatfile",
	},
}

func (GofmtService) SMD() smd.ServiceInfo {
	return smd.ServiceInfo{
		Description: ``,
		Methods: map[string]smd.Service{
			"Format": {
				Description: ``,
				Parameters: []smd.JSONSchema{
					{
						Name:        "code",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.String,
				},
			},
			"FormatFile": {
				Description: ``,
				Parameters: []smd.JSONSchema{
					{
						Name:        "input",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
					{
						Name:        "output",
						Optional:    true,
						Description: ``,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.String,
				},
			},
		},
	}
}

// Invoke is as generated code from zenrpc cmd
func (s GofmtService) Invoke(ctx context.Context, method string, params json.RawMessage) zenrpc.Response {
	resp := zenrpc.Response{}
	var err error

	switch method {
	case RPC.GofmtService.Format:
		var args = struct {
			Code string `json:"code"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"code"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.Format(args.Code))

	case RPC.GofmtService.FormatFile:
		var args = struct {
			Input  string  `json:"input"`
			Output *string `json:"output"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"input", "output"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		//zenrpc:output=""
		if args.Output == nil {
			var v string = ""
			args.Output = &v
		}

		resp.Set(s.FormatFile(args.Input, *args.Output))

	default:
		resp = zenrpc.NewResponseError(nil, zenrpc.MethodNotFound, "", nil)
	}

	return resp
}
